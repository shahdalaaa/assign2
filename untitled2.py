# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TNTTzdctS2nnhhld-R07gbsM39qp5eFx
"""

import heapq

def uniform_cost(graph, start, goal):

    pr_queue = [(0, start, [start])]

    visited = {}

    while pr_queue:

        current_cost, current_node, path = heapq.heappop(pr_queue)


        if current_node in visited and visited[current_node] <= current_cost:
            continue

        visited[current_node] = current_cost


        if current_node == goal:
            return current_cost, path

        for neighbor, weight in graph.get(current_node, []):
            new_cost = current_cost + weight

            heapq.heappush(pr_queue, (new_cost, neighbor, path + [neighbor]))

    return float("inf"), []

graph = {
    'A': [('B', 1), ('C', 4)],
    'B': [('C', 2), ('D', 5)],
    'C': [('D', 1)],
    'D': []
}

start = 'A'
goal = 'D'

cost, path = uniform_cost(graph, start, goal)
print(f"Cost: {cost}, Path: {path}")